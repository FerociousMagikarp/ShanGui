#include "lexer.h"

Lexer::Lexer() : m_word_map
(
    {
        {"package",        Token::KeywordPackage},
        {"import",         Token::KeywordImport},
        {"bool",           Token::KeywordBool},
        {"byte",           Token::KeywordByte},
        {"char",           Token::KeywordChar},
        {"int",            Token::KeywordInt},
        {"float",          Token::KeywordFloat},
        {"uint",           Token::KeywordUInt},
        {"ufloat",         Token::KeywordUFloat},
        {"int8",           Token::KeywordInt8},
        {"int16",          Token::KeywordInt16},
        {"int32",          Token::KeywordInt32},
        {"int64",          Token::KeywordInt64},
        {"uint8",          Token::KeywordUInt8},
        {"uint16",         Token::KeywordUInt16},
        {"uint32",         Token::KeywordUInt32},
        {"uint64",         Token::KeywordUInt64},
        {"float16",        Token::KeywordFloat16},
        {"float32",        Token::KeywordFloat32},
        {"float64",        Token::KeywordFloat64},
        {"ufloat16",       Token::KeywordUFloat16},
        {"ufloat32",       Token::KeywordUFloat32},
        {"ufloat64",       Token::KeywordUFloat64},
        {"char32",         Token::KeywordChar32},
        {"void",           Token::KeywordVoid},
        {"auto",           Token::KeywordAuto},
        {"true",           Token::KeywordTrue},
        {"false",          Token::KeywordFalse},
        {"null",           Token::KeywordNull},
        {"return",         Token::KeywordReturn},
        {"(",              Token::LeftParen},
        {")",              Token::RightParen},
        {"[",              Token::LeftBracket},
        {"]",              Token::RightBracket},
        {"{",              Token::LeftBrace},
        {"}",              Token::RightBrace},
        {"/*",             Token::LeftComment},
        {"*/",             Token::RightComment},
        {"+",              Token::OperatorPlus},
        {"-",              Token::OperatorMinus},
        {"*",              Token::OperatorStar},
        {"/",              Token::OperatorSlash},
        {"%",              Token::OperatorPercentage},
        {">",              Token::OperatorGreater},
        {">=",             Token::OperatorGreaterEqual},
        {"<",              Token::OperatorLess},
        {"<=",             Token::OperatorLessEqual},
        {"==",             Token::OperatorEqual},
        {"!=",             Token::OperatorNotEqual},
        {"&&",             Token::OperatorAnd},
        {"||",             Token::OperatorOr},
        {"!",              Token::OperatorNot},
        {"=",              Token::OperatorAssign},
        {"+=",             Token::OperatorAssignPlus},
        {"-=",             Token::OperatorAssignMinus},
        {"*=",             Token::OperatorAssignMulti},
        {"/=",             Token::OperatorAssignDivi},
        {"%=",             Token::OperatorAssignResi},
        {".",              Token::OperatorDot},
        {",",              Token::OperatorComma},
        {";",              Token::OperatorSemicolon},
        {"\"",             Token::OperatorDoubleQuote},
        {"\"\"",           Token::OperatorEmptyString},
        {"'",              Token::OperatorSingleQuote},
        {"//",             Token::OperatorComment},
    }
)
{

}
